AWSTemplateFormatVersion: "2010-09-09"
Transform: AWS::Serverless-2016-10-31

Description: >
  aws-access-key-expiry

  Sample SAM Template for aws-access-key-expiry

Metadata:
  AWS::ServerlessRepo::Application:
    Name: aws-access-key-expiry
    Description: TODO
    Author: Christian Schneider
    SpdxLicenseId: Apache-2.0
    LicenseUrl: LICENSE
    ReadmeUrl: README.md
    HomePageUrl: https://github.com/cdschneider/aws-access-key-expiry
    SourceCodeUrl: https://github.com/cdschneider/aws-access-key-expiry

Parameters:
  AccessKeyTTL:
    Type: Number
    Description: The amount of time (in seconds) before an IAM access key should be expired. 
    Default: 7776000
    MinValue: 300

Resources:
  ExpireAccessKeysStateMachine:
    Type: AWS::Serverless::StateMachine
    Properties:
      DefinitionUri: statemachine/workflow.asl.json
      DefinitionSubstitutions:
        AccessKeyActionsFunctionArn: !GetAtt AccessKeyActionsFunction.Arn
        AccessKeyRotationFunctionArn: !GetAtt AccessKeyRotationFunction.Arn
        AccessKeyDynamoDbTableName: !Ref AccessKeyTable
      Type: EXPRESS
      Tracing:
        Enabled: True
      Logging:
        Destinations:
          - CloudWatchLogsLogGroup:
              LogGroupArn: !GetAtt ExpireAccessKeysStateMachineLogGroup.Arn
        IncludeExecutionData: True
        Level: ALL
      Events:
        RecurringSchedule:
          Type: Schedule
          Properties:
            Schedule: "rate(5 minutes)"
            Enabled: True
      Policies:
        - IAMReadOnlyAccess
        - AWSXrayWriteOnlyAccess
        - !Ref IAMUpdateAccessKeysPolicy
        - !Ref StepFunctionsLoggingPolicy
        - LambdaInvokePolicy:
            FunctionName: !Ref AccessKeyActionsFunction
        - LambdaInvokePolicy:
            FunctionName: !Ref AccessKeyRotationFunction
        - DynamoDBWritePolicy:
            TableName: !Ref AccessKeyTable

  ExpireAccessKeysStateMachineLogGroup:
    Type: AWS::Logs::LogGroup

  AccessKeyActionsFunction:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: ./src/AccessKeyActions/
      Handler: 'AccessKeyActions::AccessKeyActions.Function_FunctionHandler_Generated::FunctionHandler'
      Runtime: 'dotnet6'
      Architectures:
        - x86_64
      Policies:
        - DynamoDBReadPolicy:
            TableName: !Ref AccessKeyTable
        - AWSXrayWriteOnlyAccess
      Tracing: Active
      Timeout: 10
      Environment:
        Variables:
          Function__KeyRotation: 604800
          Function__KeyInstallation: 86400
          Function__KeyRecovery: 86400
          DynamoDB__TableName: !Ref AccessKeyTable

  AccessKeyRotationFunction:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: ./src/AccessKeyRotation/
      Handler: 'AccessKeyRotation::AccessKeyRotation.Function_FunctionHandler_Generated::FunctionHandler'
      Runtime: 'dotnet6'
      Architectures:
        - x86_64
      Policies:
        - IAMFullAccess
        - SecretsManagerReadWrite
        - AWSXrayWriteOnlyAccess
      Tracing: Active

  StepFunctionsLoggingPolicy:
    Type: AWS::IAM::ManagedPolicy
    Properties:
      PolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Effect: Allow
            Action:
              - 'logs:CreateLogDelivery'
              - 'logs:GetLogDelivery'
              - 'logs:UpdateLogDelivery'
              - 'logs:DeleteLogDelivery'
              - 'logs:ListLogDeliveries'
              - 'logs:PutResourcePolicy'
              - 'logs:DescribeResourcePolicies'
              - 'logs:DescribeLogGroups'
            Resource: '*'

  IAMUpdateAccessKeysPolicy:
    Type: AWS::IAM::ManagedPolicy
    Properties:
      PolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Effect: Allow
            Action:
              - 'iam:UpdateAccessKey'
              - 'iam:DeleteAccessKey'
            Resource: '*'

  AccessKeyTable:
    Type: AWS::Serverless::SimpleTable
    Properties:
      PrimaryKey:
        Name: Id
        Type: String